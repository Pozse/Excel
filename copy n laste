**Here's the complete implementation.** Due to the sheer number of tools (300+), I'll provide the full framework with a subset of tools. You can expand the database by adding more entries to `tools.json`.

---

### **File Structure**
```
KaliCommander/
├── tools.json
├── kali_commander.py
├── requirements.txt
└── README.md
```

---

### **1. tools.json** (Complete Structure - Add Missing Tools Similarly)
```json
{
  "nmap": {
    "category": ["Information Gathering", "Vulnerability Analysis"],
    "purpose": ["port scan", "network mapping", "os detection"],
    "command": "nmap -sV -sC -p- {target} -oN {output}",
    "installed_by_default": true
  },
  "hydra": {
    "category": ["Password Attacks"],
    "purpose": ["brute force", "password cracking"],
    "command": "hydra -l {username} -P {wordlist} {service}://{target} -t 4",
    "installed_by_default": true
  },
  "sqlmap": {
    "category": ["Web Application Analysis", "Database Assessment"],
    "purpose": ["sql injection", "database dump"],
    "command": "sqlmap -u {url} --risk=3 --level=5 --batch",
    "installed_by_default": true
  },
  "aircrack-ng": {
    "category": ["Wireless Attacks"],
    "purpose": ["wpa cracking", "wifi analysis"],
    "command": "aircrack-ng -w {wordlist} {capture_file}",
    "installed_by_default": true
  },
  "metasploit-framework": {
    "category": ["Exploitation Tools"],
    "purpose": ["exploit development", "payload generation"],
    "command": "msfconsole -q -x 'use {exploit}; set RHOSTS {target}; run'",
    "installed_by_default": true
  }
}
```

---

### **2. kali_commander.py** (Complete Code)
```python
import json
import re
import spacy
import subprocess
import sys
from pathlib import Path

class KaliCommander:
    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")
        self.tools = self.load_tools()
        self.entity_patterns = {
            'ip': r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b',
            'url': r'(https?://\S+)|(www\.\S+)',
            'file': r'\b\w+\.(cap|txt|pcap|db)\b',
            'ssid': r'SSID\s+[\'"]?(.*?)[\'"]?\s',
            'port': r'port\s+(\d+)',
            'service': r'(ssh|ftp|http|smb)',
            'interface': r'(eth\d|wlan\d)'
        }

    def load_tools(self):
        try:
            with open('tools.json') as f:
                return json.load(f)
        except FileNotFoundError:
            print("[!] Error: tools.json not found!")
            sys.exit(1)

    def extract_entities(self, text):
        entities = {}
        # Regex extraction
        for ent_type, pattern in self.entity_patterns.items():
            matches = re.search(pattern, text, re.IGNORECASE)
            if matches:
                entities[ent_type] = matches.group(1)
        
        # spaCy NER
        doc = self.nlp(text)
        for ent in doc.ents:
            if ent.label_ in ['GPE', 'ORG']:
                entities['target'] = ent.text
            elif ent.label_ == 'PRODUCT':
                entities['service'] = ent.text.lower()
        return entities

    def tool_matches_purpose(self, query, purposes):
        query = query.lower()
        return any(purpose in query for purpose in purposes)

    def detect_tools(self, query):
        matched = []
        for tool, data in self.tools.items():
            if self.tool_matches_purpose(query, data['purpose']):
                matched.append((tool, data))
        return matched

    def generate_command(self, tool_data, entities):
        cmd = tool_data['command']
        required_params = re.findall(r'\{(\w+)\}', cmd)
        
        for param in required_params:
            value = entities.get(param, f'<{param.upper()}>')
            cmd = cmd.replace(f'{{{param}}}', value)
        
        return cmd

    def is_installed(self, tool):
        try:
            subprocess.check_output(['which', tool], stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False

    def process_query(self, query):
        entities = self.extract_entities(query)
        tools = self.detect_tools(query)
        
        if not tools:
            return {"error": "No matching tools found. Try being more specific."}
        
        results = []
        for tool_name, tool_data in tools:
            if not self.is_installed(tool_name):
                install_cmd = f"sudo apt install {tool_name}"
            else:
                install_cmd = None
            
            command = self.generate_command(tool_data, entities)
            results.append({
                'tool': tool_name,
                'command': command,
                'install': install_cmd,
                'category': tool_data['category'],
                'purpose': tool_data['purpose']
            })
        
        return results

def print_results(results):
    if 'error' in results:
        print(f"[!] {results['error']}")
        return
    
    print("\n[*] Recommended Commands:")
    for idx, res in enumerate(results, 1):
        print(f"\n{idx}. {res['tool'].upper()}")
        print(f"   Category: {', '.join(res['category'])}")
        print(f"   Purpose: {', '.join(res['purpose'])}")
        print(f"   Command: {res['command']}")
        if res['install']:
            print(f"   [!] Install: {res['install']}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python kali_commander.py '<your query>'")
        sys.exit(1)
    
    kc = KaliCommander()
    results = kc.process_query(sys.argv[1])
    print_results(results)
```

---

### **3. requirements.txt**
```
spacy>=3.0.0
python>=3.6
```

---

### **4. Installation & Usage**

1. **Install Dependencies**:
```bash
sudo apt update && sudo apt install python3 python3-pip
pip3 install -r requirements.txt
python3 -m spacy download en_core_web_sm
```

2. **Add More Tools**:
   - Expand `tools.json` using this template:
   ```json
   "tool-name": {
     "category": ["Category"],
     "purpose": ["action1", "action2"],
     "command": "command {parameter}",
     "installed_by_default": true/false
   }
   ```

3. **Run**:
```bash
# Example 1: Port scanning
python3 kali_commander.py "Scan ports on 192.168.1.1 and save to scan.txt"

# Example 2: WiFi cracking
python3 kali_commander.py "Crack WPA2 using capture.cap and wordlist rockyou.txt"

# Example 3: SQL injection
python3 kali_commander.py "Test http://example.com/login.php for SQLi vulnerabilities"
```

---

### **5. Key Features**
- Automatic parameter detection (IPs, URLs, files)
- Tool installation suggestions
- Multi-tool support for same task
- Error handling for missing tools/parameters

To make this truly comprehensive, add **all 300+ Kali tools** to `tools.json` using the same format. Let me know if you need help creating entries for specific tools!